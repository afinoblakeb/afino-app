---
description: 
globs: 
alwaysApply: false
---
# TypeScript Rules

## Type Safety

- ALWAYS enable `strict` mode in TypeScript configurations.
- NEVER use the `any` type. Use specific types or `unknown` when the type is truly unknown.
- ALWAYS add explicit types for function parameters and return values.
- ALWAYS create reusable interfaces and types for shared data structures.
- ALWAYS place shared types in dedicated files under `src/types/`.

## Examples

```typescript
// INCORRECT
const processTransaction = (data: any) => {
  // ...
};

// CORRECT
interface Transaction {
  id: string;
  amount: number;
  currency: string;
  date: Date;
  status: 'pending' | 'completed' | 'failed';
}

const processTransaction = (transaction: Transaction): Promise<boolean> => {
  // ...
  return Promise.resolve(true);
};
```

## Naming Conventions

- ALWAYS use camelCase for variables, functions, and methods.
- ALWAYS use PascalCase for interfaces, types, classes, and components.
- ALWAYS use UPPER_CASE for constants.
- ALWAYS use descriptive names that clearly indicate the purpose.

## Error Handling

- ALWAYS use try/catch blocks for error-prone operations.
- ALWAYS provide meaningful error messages.
- NEVER swallow errors without proper handling.
- ALWAYS type errors appropriately.

```typescript
// CORRECT
try {
  await processTransaction(transaction);
} catch (error) {
  if (error instanceof ApiError) {
    logger.error(`API Error: ${error.message}`, { transactionId: transaction.id });
    throw new TransactionError(`Failed to process transaction: ${error.message}`);
  }
  throw error;
}
```

## Async/Await

- ALWAYS use async/await instead of raw promises.
- ALWAYS properly handle promise rejections with try/catch.
- NEVER mix async/await with .then() chains in the same function.

## Imports

- ALWAYS organize imports in the following order:
  1. External libraries
  2. Internal modules
  3. Type imports
  4. CSS/SCSS imports
- ALWAYS use absolute imports for project modules.
- NEVER use relative imports that go up more than two directory levels.

```typescript
// CORRECT
import { useState, useEffect } from 'react';
import { z } from 'zod';

import { api } from '@/lib/api';
import { useAuth } from '@/hooks/useAuth';

import type { Transaction } from '@/types/transactions';

import './styles.css';
``` 