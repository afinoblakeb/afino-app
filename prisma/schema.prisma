// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id
  email         String            @unique
  name          String?
  firstName     String?
  lastName      String?
  avatarUrl     String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  organizations UserOrganization[]
}

model Organization {
  id          String            @id @default(uuid())
  name        String
  domain      String?           @unique
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  users       UserOrganization[]
}

model UserOrganization {
  id             String       @id @default(uuid())
  userId         String
  organizationId String
  roleId         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  role           Role         @relation(fields: [roleId], references: [id])

  @@unique([userId, organizationId])
}

model Role {
  id               String             @id @default(uuid())
  name             String             @unique
  permissions      String[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  userOrganizations UserOrganization[]
}

model UserProfile {
  id           String         @id @default(uuid())
  userId       String         @unique @map("user_id")
  bio          String?
  location     String?
  preferences  Json           @default("{}")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  
  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Member {
  id             String         @id @default(uuid())
  organizationId String         @map("organization_id")
  userId         String         @map("user_id")
  roleId         String         @map("role_id")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  
  // Relations
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           Role           @relation(fields: [roleId], references: [id], onDelete: Restrict)

  @@unique([organizationId, userId])
  @@map("members")
}

model Invitation {
  id             String         @id @default(uuid())
  email          String
  organizationId String         @map("organization_id")
  roleId         String         @map("role_id")
  token          String         @unique
  expiresAt      DateTime       @map("expires_at")
  createdAt      DateTime       @default(now()) @map("created_at")
  
  // Relations
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role           Role           @relation(fields: [roleId], references: [id], onDelete: Restrict)
  invitedBy      User?          @relation("InvitedBy", fields: [invitedById], references: [id], onDelete: SetNull)
  invitedById    String?        @map("invited_by_id")

  @@unique([organizationId, email])
  @@map("invitations")
}
